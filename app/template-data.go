// Code generated by go-bindata.
// sources:
// templates/base.html
// templates/config-base.html
// templates/login.html
// templates/register.html
// templates/settings.html
// templates/shitbucket-import.html
// templates/tag-index.html
// templates/url-edit.html
// templates/url-index.html
// templates/url-new.html
// templates/url-partial.html
// templates/url-view.html
// DO NOT EDIT!

package app

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBaseHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\xdd\x6e\x2b\xb7\x11\xbe\x3f\x4f\xc1\xd0\x41\x7d\xd1\xb3\xda\x38\x3d\x28\xd0\x53\x49\x81\xf3\xe3\xf4\xa0\xa7\x2d\x90\xe3\xf4\xb6\xe0\x2e\x47\x12\x2d\xee\x72\x43\x72\x25\x0b\x86\x9f\xa3\xcf\xd0\x27\xe8\x7d\xfb\x62\x1d\xfe\xec\x8a\xfb\xa3\xd8\x48\x91\x0b\x5b\xfc\x19\xce\x0c\xe7\xe7\xe3\xcc\x3e\x3d\x11\x0e\x1b\x51\x03\xa1\xad\x96\x59\xc3\xb4\x15\x4c\x52\xf2\xfc\xfc\x66\xc9\xc5\x81\x94\x92\x19\xb3\xa2\x5a\x1d\xe9\xfa\x0d\x21\xe9\x5a\xa9\x64\x26\xb7\xd9\xcd\x97\x7e\x67\xb8\xe7\x78\x95\xaa\xb6\x0c\x39\x6b\xdc\xf7\x04\x48\xb2\x7b\xb7\x8e\x43\x9c\x30\xb2\xd3\xb0\x59\x51\xd4\x61\xf1\xe3\x0f\x1f\xdd\x1f\xca\xa5\xc4\x32\xbd\x05\xbb\xa2\xff\x28\x24\xab\xf7\x74\xdd\xed\xdf\x0b\x2b\x01\x29\x96\x39\xeb\xb8\x2c\x73\xc7\xb1\x9b\x34\x9d\x78\x0b\x8f\x36\xab\x5a\x0b\x9c\xae\x97\xa6\x62\x52\xae\x53\x69\x1a\x0e\xa0\x4d\xbc\xf2\x41\xc0\x91\x12\x2a\x38\x0d\x52\x3e\x7c\xeb\x94\xe8\x85\xde\x29\x5d\x31\x8b\x9c\xbe\xd1\xc0\xf0\xe7\xd6\x46\x0d\xc8\x6f\x2a\xc1\xb9\xb2\x7f\x24\x43\xfd\xdd\x54\x6c\x88\x30\x27\xd5\xda\xb6\x80\x74\xaf\x3f\xb2\x14\x9d\xaa\x1b\x46\x36\x2c\xdb\x08\x59\xa1\xaa\xb9\x70\x72\xa1\xe6\x5e\x46\x54\x3c\x6f\xfa\x1b\x06\xd6\x8b\x4f\x60\xad\xa8\xb7\x66\xf1\x5d\x55\x00\xff\xbb\xe0\xa0\x8c\xf3\x58\x4a\x34\x2b\xbf\x33\x54\xe2\x29\x70\x2c\x32\x0d\xa6\x51\xb5\x11\x07\x20\xe3\x85\xec\xe6\xf7\xc5\xe9\x0f\x34\xf1\x9b\xd8\x68\x56\xc1\x25\x06\x99\xb0\x50\x51\x62\x74\xb9\xa2\x79\x7e\x3c\x1e\x17\x51\x91\x45\xa9\xaa\xdc\x53\xe7\xa8\x62\x5c\x3c\x08\x3e\x74\x3e\x5e\x59\x1d\x37\xad\x94\xa6\xd4\x00\xb5\xb3\x89\x17\x77\xf6\x38\x2a\xbf\x3e\x5f\x35\x18\x6b\x32\x1f\x1a\xcc\x09\xf8\x13\x33\xf7\x6c\x9b\xd8\x69\xec\x03\xcb\xb6\xc1\x05\xee\x94\x66\xf5\x16\xc8\xe7\xb8\x46\xde\xaf\x02\x83\xef\xc1\x46\x06\xb3\xb1\x84\xa4\x69\x2c\xb9\xa3\x49\x2c\xf9\xe9\x5f\x9d\xd9\x62\xf4\xbc\xa8\xfa\x38\x9d\x58\x69\x05\x5a\x38\x75\x84\x69\x58\xdd\x91\xec\x30\xb2\xa0\x4e\x76\x7d\x82\xc5\xcd\xc2\xd6\xf4\x42\xf8\x03\x17\x76\x26\xfc\xbf\xc3\xe5\x24\xcf\x26\xec\x88\x4f\x31\xee\xac\xa4\x3b\xd6\x57\x94\x70\x66\x59\x36\x2f\x88\x83\x04\x0b\x53\x51\xe1\x8c\x55\xdb\xad\x84\x15\xad\x14\x77\xf0\x13\xd6\x22\x0e\x5c\x21\x92\x6c\x84\xae\x3a\x16\xeb\x6f\xfd\xef\x40\x3d\xcc\x16\x34\xc6\x4c\x90\xf4\xc3\x38\x88\x3f\x89\xb9\x13\x08\x8c\xd2\x47\xe0\xe7\x57\x31\x42\x38\x6a\x2f\xb8\x03\xbe\x81\x3a\x88\x57\x85\xa8\x39\x3c\xae\x68\x76\x43\x89\x56\xee\x1e\x1c\x51\x54\x6d\x27\x98\xe9\x59\x65\x61\x93\x84\x89\xa9\x66\xf0\x33\x6c\x39\x04\x85\xda\xf6\x4e\x9d\x52\xec\x00\xb5\xd2\x97\x62\x22\xf5\x51\x30\x1a\xa2\x06\x41\xd3\x5f\xb4\xd6\x9c\x8c\x42\xf1\x53\x2a\xa1\x49\x83\xe2\x56\x83\x4b\x65\x62\xda\x38\x38\xb2\xda\x12\xab\x48\x30\x0e\xb1\x3b\x61\x9c\xc4\xaf\x12\x4f\x35\xaf\x14\xbc\x51\xca\x0e\x2f\x57\xb4\xd6\x2a\x8c\xbd\x53\x83\x26\x0e\x13\x9a\x06\x25\xfe\xa1\x57\x36\xac\x95\x36\xc6\x10\x17\xa6\x12\x3d\x4b\xba\xfe\x86\xd5\x25\xc8\x65\x1e\x0e\x0f\x1e\xa3\x31\x1f\x6f\x37\x3f\x54\xfb\x99\x98\x7b\x4d\x8c\x61\x88\x8d\x22\x6c\x83\x42\x76\x34\xa4\xfd\x19\x66\xf6\x70\x7a\x4b\x3e\x3f\x30\xd9\x82\xf1\x78\x73\xe7\xc8\xc0\x8c\xe9\x2a\x30\x86\xe1\x00\x49\x3a\xea\x08\x20\xa9\xf5\x98\x04\x6d\x89\xff\x9f\x39\xe8\x41\xee\x3e\xa7\xdf\x0c\xad\xd8\x3d\xe3\x52\x19\x18\x5b\xcb\x1f\xa6\xeb\xff\xfe\x73\x6c\x29\xc7\xaf\xd3\xa2\x13\xdd\xdd\x3e\x85\xb4\xf3\x78\x3e\xd3\xac\x7b\xcb\x9d\x1d\xc8\x5f\x44\x2d\xf0\xa1\x13\xc6\x8a\x92\x7c\xad\xd4\xbe\x62\x7a\x8f\x71\x3a\x7f\xae\x60\x06\x42\x82\x7e\xc6\x55\xe9\x02\x81\xec\x6c\x25\xd1\xe6\xe1\xc7\xd5\x18\x98\x13\xd1\x2f\x5e\xca\xfa\xd3\x8f\x77\x3f\x38\x85\xf0\x5d\x6a\x24\xbe\xe1\xbd\xf4\x85\x07\xe3\x40\x14\x0e\x54\x60\x19\xa9\x11\xa6\x57\xd4\x61\x79\xa3\xd0\x0a\x24\xa6\xe1\x8a\x1e\x05\xb7\xbb\x15\xc7\x47\xab\x84\xcc\x4f\xde\x12\xd4\xde\x55\x4c\x99\x29\xd1\x66\xab\x9b\x2e\x97\xa5\xa8\xf7\x01\x16\xaf\x77\xd6\x36\xef\xf3\x7c\x83\x5c\xcc\x62\xab\x14\xe2\x1c\x6b\x84\xf1\xcf\x61\x69\xcc\x57\x1b\x56\x09\x79\x5a\xfd\xad\x81\xfa\xb7\x9f\x58\x6d\xde\xbf\xfb\xe2\x8b\xb7\xbf\x0b\x7f\xc2\xa2\x65\xca\xb7\xef\xba\xd1\x35\x62\xaa\x5c\x5d\x1b\x7b\x92\x80\x01\x02\xf6\x3a\x24\xc3\xb5\x4b\x75\xc7\xed\x3a\x95\x1f\xf2\xa4\xdb\xa2\xfe\x2c\x3d\x9f\xed\x70\x3b\x37\x96\xa1\xf1\x1d\x4d\x5e\x60\xce\x19\xab\x59\xb3\xa8\x44\xbd\x70\xa7\xfe\x4f\x86\xac\x69\x26\x6c\x5e\x71\xcc\x59\x2b\x63\x47\x30\xaa\x82\x81\x2a\x58\xf1\x45\xff\x2e\x1d\x30\x45\xb6\x9f\x65\x19\xb9\x13\x8f\xc0\xd1\x79\x87\x82\x69\x92\x65\x09\xa8\x3a\xd0\xb6\xaa\xe9\xa1\x22\xd2\x84\x9f\x1e\x30\xe6\x80\x28\xad\x61\x7b\xa8\x48\xf6\x23\x8b\x09\x0c\xbf\x80\x55\xf1\x58\x78\xf4\x46\x2f\x20\x96\xd5\x92\x35\x7d\x4a\x76\x8f\xe0\x22\x9e\xe9\xb7\x53\x61\x23\xdc\x17\xa8\x76\x86\xc4\xae\x9c\x49\x81\xfe\xd7\x23\x9d\x02\x6a\x0a\xa9\x51\xf5\x02\x51\x8c\x5f\xaa\x43\xfc\x0b\x4a\x3d\x4e\xb9\x7c\x1d\x3d\xee\xc9\x3b\x31\x69\x42\xbc\x39\xc8\xcf\x99\x67\xd9\xca\x44\x95\x8e\x14\x7f\x46\x46\x74\xe0\xe6\xca\xac\x83\x47\xd8\xc5\xad\x1f\xde\xb3\xe2\x5c\xa5\x45\x7e\x18\x6e\xc3\x05\x29\xce\x0d\xc6\x15\x1a\x68\x54\x5a\x72\x44\xf3\x42\x31\xcd\x43\x81\xe9\x2e\xb7\xcc\xf1\xcc\x80\x49\x8d\x8f\x66\x47\x47\x4e\x60\xfb\x18\x4e\xa4\xa0\x8a\x58\xcf\xc2\x4f\xbd\x9e\xce\x76\x86\x3e\x3f\x77\xd0\xef\x57\x69\x7c\x79\xce\x3a\xe5\x53\x9d\x1c\xe2\x66\xcc\xc5\xfd\x65\x95\x66\x25\x62\x25\xfb\x0a\x89\xe3\xd2\x38\xf1\xef\x4c\xe1\x6d\x62\xe5\xed\x0a\xec\x39\x55\x96\x79\x2b\x5f\xe5\xd1\x6e\xa8\xc5\x76\x67\xa7\xee\x75\xcd\xc0\x47\x4c\x34\xe0\x1f\xea\x89\x57\x53\x27\x8e\xc3\xb3\x76\x85\xfd\x9c\xf2\x8d\x6c\x3b\xe5\x6f\x39\x0f\xc5\xd5\x25\x53\xc6\x83\x5c\xab\x86\xab\x63\x3d\x52\x2f\xe9\x88\xaf\xe8\x98\x76\x1e\x2b\x7a\x4e\xb1\xea\xec\x60\x86\x69\x81\x65\x38\xc3\x96\xac\x69\x1b\xc4\x3e\xdd\x42\x5c\x84\x47\xcc\x5c\x0e\xdc\xa9\x2f\x5d\x9a\xf8\xe6\xd5\x80\xc6\x5e\x92\x09\xe9\x1e\xe4\x41\xd2\x97\x4c\x83\xed\x33\x7e\xd4\x11\x8c\x3c\xd1\xeb\x5a\x41\xdd\x4e\x2e\xf7\x33\x06\x36\xb1\x9f\x8d\xe9\x1f\x67\xf3\x76\xec\x6c\x19\x2e\x6c\xa0\x61\x9a\x59\xa5\xcf\x06\x13\xd8\x52\x82\x07\xa9\x0b\x47\xe7\x75\xc0\x82\x1c\x3b\xd2\xa0\xc1\x47\x3f\xbe\x24\x7f\x1c\x8b\x6e\x65\x4c\x35\xee\xee\xd2\x00\xac\x95\xfd\x05\x41\x88\xfa\x89\xba\x57\x4f\xd4\xf3\xda\xcd\xc9\x1d\xea\x1b\xb0\xd4\x21\x58\xee\x9e\x94\x1e\x30\x13\xb4\x99\x56\xb6\x93\x12\xf3\xfc\x2e\x76\x1d\x51\x6c\x54\x66\xdf\x50\x99\x3d\x9a\xf3\x77\xa2\xb3\x25\xfa\x2f\x3a\xa9\xb6\xfd\x47\x1c\x2c\x93\x38\x49\xbf\xe4\x3c\x3d\x85\x03\xae\x68\x6b\x06\xbc\x46\x77\x1e\xd4\x7a\xb1\xe2\x5e\x5c\x24\xe8\x94\x4f\x49\x2e\x99\x20\xb4\x24\x3d\x02\x0c\x1b\x94\x17\x0b\x87\xd9\xef\x53\xfd\xf6\x7f\xfe\x45\xfe\x8c\x25\x11\xb9\x07\xad\x4f\xe7\xd5\x7f\x4f\x3f\x98\xb9\x8a\xd2\x60\x49\xb9\x15\x76\xd7\x16\xbe\x90\xdc\x9f\x5c\x7b\x82\x07\x73\xd3\x6e\xf4\x14\xa6\x02\x69\x04\xaa\xef\xfd\x64\x90\xcc\xbf\x48\x4c\x8e\xbd\x02\xf6\x20\x74\xfd\xc1\xff\xbe\xc8\xf0\xca\x15\x61\xeb\xaf\x59\xb9\x77\x1d\x22\x4e\x46\xaf\xfc\x5c\x63\xb8\xcc\x83\x95\xc3\x6c\xe0\xb8\xd8\xad\xf7\x6e\x5b\x9a\x52\x8b\xc6\x86\x4f\x4f\x9d\xf2\xec\x81\x3d\x8e\xab\x6e\xb7\x86\xa9\x53\x98\xfc\xe1\xa7\x16\xf0\x32\x37\x8b\x9b\x9b\xc5\x97\x71\xe6\xcb\xcd\x07\x0f\xea\x81\xe1\x7a\xca\xbd\x2b\x55\x1f\xc6\x15\xf3\xf4\xdc\x85\x57\xe7\x12\x3b\x57\x2f\xcf\x32\xe9\x63\x1c\x6b\x2d\x5f\xf8\x62\x25\xec\x5b\x9e\xf3\xde\xff\x02\x00\x00\xff\xff\x0e\x60\x40\xef\xcd\x15\x00\x00")

func templatesBaseHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBaseHtml,
		"templates/base.html",
	)
}

func templatesBaseHtml() (*asset, error) {
	bytes, err := templatesBaseHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base.html", size: 5581, mode: os.FileMode(420), modTime: time.Unix(1455161573, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConfigBaseHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x4d\x6e\xdb\x3a\x10\xde\xfb\x14\xf3\xf8\x02\x78\xf1\x2c\x31\xce\xcb\x2a\x90\xf4\x80\xb7\x48\x51\x74\x51\xa0\x49\x0f\x40\x4b\x23\x8b\x0e\xf5\x53\x71\xec\xc4\x08\x72\x8e\x9e\xa1\x27\xe8\xbe\xbd\x58\x87\xa4\x65\xd9\x4e\x8a\x06\x08\x90\x44\x33\xe4\x37\x1f\xbf\x7c\x9c\xe1\xe3\x23\x14\x58\xea\x06\x41\x94\x46\xd9\x4a\xc0\xd3\xd3\x04\x80\x97\x7b\xd5\x2c\x11\xce\xee\x70\x3b\x83\xb3\x8d\x32\x6b\xb4\x70\x95\x42\x7c\xed\x60\x1c\x9f\xe0\x6a\xb4\x56\x71\xc0\x90\x01\xed\x11\x00\x49\xa1\x37\x90\x73\x95\x4d\x85\x32\xd8\x13\xf8\xbf\x11\xd7\x3a\x76\x86\x89\xcc\x03\x19\xba\x58\x13\xb5\xcd\x80\xce\x4d\x6b\x51\x40\xa1\x48\x45\x85\xb6\xb5\xde\x53\x88\xec\xe7\xd7\x44\x06\xf4\x50\xec\xf8\x06\x15\xc3\xd1\x92\xcf\xce\x82\x4e\x6c\x8a\xbd\xe6\x5d\x3c\x46\x93\x03\x1f\x48\x93\x41\xe7\x03\xaf\xe9\x12\xe2\x5b\x97\x87\xf4\x30\x0e\x95\x2f\x53\x2c\x94\xf5\x0c\x93\xe4\xaf\xa2\xcd\x69\xdb\x21\x54\x54\x9b\x6c\x92\x84\x0f\x2b\xab\x50\x15\x41\x79\xe2\x0f\xcc\x6e\x3e\x5f\x7f\x72\xda\x08\xeb\xce\x28\x1a\x85\xc4\x4c\x94\xc8\x00\x0a\x05\x35\x92\x82\x46\xd5\x98\x8a\x8d\xc6\xfb\xae\x65\x43\x20\x6f\x1b\xc2\x86\x52\x71\xaf\x0b\xaa\xd2\x02\x37\x3a\xc7\xc8\x27\x33\xd0\x8d\x26\xad\x4c\x64\x73\xb6\x2f\x9d\xef\x0c\x4f\x8c\x6e\xee\xa0\xea\xb1\x4c\xa7\x15\x51\x77\x25\x65\xc9\x2c\x36\x5e\xb6\xed\xd2\xa0\xea\xb4\x8d\xf3\xb6\x96\xb9\xb5\xff\x95\xaa\xd6\x66\x9b\x7e\xec\xb0\xf9\xe7\x46\x35\xf6\xea\xf2\xfc\x7c\xf6\x6f\xf8\xd5\xa4\x8c\xce\x67\x97\x43\x34\x85\x1e\x4d\x3a\xb5\xb4\x35\xc8\xbd\x82\x34\x05\xe7\x41\x3a\x25\x7c\x20\xc7\x36\x3d\x3c\xdf\x6f\x89\x61\x4b\xf8\x5a\x31\xd6\x8a\x20\x50\x48\x4b\x8a\x74\xee\x30\x72\xd1\xb6\x64\xa9\x57\x5d\x5c\xeb\x26\x76\x55\x6f\x24\x54\x5d\xf7\x8c\xe6\x15\x65\xce\xad\x48\xdd\xa3\x6d\x6b\x3c\x92\x92\xc8\xe1\x7e\x93\x45\x5b\x6c\xb3\x67\x83\xe0\x6e\x4b\x71\xaf\xf4\x02\x74\x11\x52\xbe\xbc\x71\x10\x8e\xa0\x26\x7a\xb0\xd1\xfc\x62\xbf\x0b\xc7\x7d\xb2\x1b\xdc\x78\xe8\xfa\x67\x80\x81\xfd\x10\xb2\x1f\x8d\x7d\x18\xe2\x92\xad\xc5\x7e\x38\x3b\x64\xbf\x91\x35\xfc\x07\xa3\xac\xa4\x1b\x76\x9d\xfb\x51\xbd\x26\x2c\xc0\x87\x39\x9f\x7f\x04\xfd\xf1\x0d\x3e\xb0\xb5\x70\x8b\x7d\xbf\x1d\x57\xbf\x8f\x5c\x6a\x67\xb8\xeb\x4c\xcb\xad\xb9\xd4\x54\xad\x17\xbe\x21\xef\xb8\x92\x5c\xa1\xb4\xeb\x92\x59\x13\xbd\x17\xac\xa0\x54\x51\x80\xf2\xba\xd4\x19\xbc\xf3\x49\x22\x55\xf6\xb6\x63\x24\x3f\x3f\xfc\xac\x89\xec\xbd\xff\xfe\x91\xf0\x6f\x6a\x3b\x91\xfd\xaf\x72\xee\xc8\x96\x7f\xba\xa3\x8a\x44\x76\xd9\x4b\x57\x11\x1c\xdf\x65\x36\xef\x75\x47\x60\xfb\x7c\xd4\xa7\x56\xea\xe1\x74\x40\xdd\x9a\x34\x7a\x61\xe5\xea\xcb\x1a\x59\xef\x3c\x9e\xcf\xe3\x8b\x5d\xe6\x3b\x73\x65\x9d\x1d\x81\xf0\x05\xf6\xa1\xab\x57\xa7\xc3\xf5\xfa\x3a\x37\x43\xa7\x68\x7e\xa3\x7d\xfb\xf3\x3c\xf8\x87\x6f\x7c\x2e\x7f\x05\x00\x00\xff\xff\x6a\xa1\x5c\x28\x79\x06\x00\x00")

func templatesConfigBaseHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfigBaseHtml,
		"templates/config-base.html",
	)
}

func templatesConfigBaseHtml() (*asset, error) {
	bytes, err := templatesConfigBaseHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/config-base.html", size: 1657, mode: os.FileMode(420), modTime: time.Unix(1455062019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\x4d\x8f\xd4\x30\x0c\xbd\xef\xaf\xb0\x72\x0f\x15\x20\x71\x6a\x2b\x2e\x70\x42\x62\xc5\xc2\x0f\x48\x13\x77\x36\x22\x5f\x4a\xdd\xdd\x59\x56\xf3\xdf\x71\xda\x4e\x3b\x15\xea\x85\x3d\x8c\xc6\x8e\xfd\x9e\xdf\xb3\xdc\xd7\x57\x30\xd8\xdb\x80\x20\x74\x0c\x84\x81\x04\x5c\x2e\x77\xb5\xb1\x4f\xa0\x9d\x1a\x86\x46\xe4\xf8\x2c\xda\x3b\x80\x3a\x5d\x5f\x1c\x2a\x03\x84\x67\x92\x9a\x01\x98\xe7\xd8\x8f\x84\x46\xb4\x0f\xbf\xbe\xfe\x80\x6f\xf1\x64\x43\x5d\xa5\x09\x77\xc3\xa5\xa3\x93\xe7\x41\xbe\xff\x00\x25\xf2\x46\x7e\xba\x06\xb1\xef\x07\x24\xf9\x71\x1a\xc5\xa0\x3e\x66\x0f\x4a\x93\x8d\xa1\x11\xac\x32\xe3\x13\xe6\x81\x65\xba\x42\x5d\x44\x0a\xf0\x48\x8f\xd1\x34\xe2\xfe\xfb\xc3\xcf\x05\x57\x90\x16\x9d\x61\xae\xeb\xc3\x5e\x41\xe1\x95\xa7\x1c\xc7\x24\xb6\x06\x6e\x71\xaa\x43\x07\x5c\x6d\x04\x7a\x65\x9d\xd8\x24\x07\xca\xac\x71\x6a\x10\xed\x97\x52\xac\xab\x29\xdb\x11\xd8\x90\x46\xda\x4d\x59\x90\x30\x55\xa4\x3b\x09\xb0\x66\x65\xa7\x97\x84\x6b\x12\x94\xdf\x92\xe4\x94\xc6\xc7\xe8\x0c\xb2\x96\xdf\x2f\x0e\x3f\xe3\x59\xf9\xe4\xf0\x9d\x8e\x5e\x80\x1a\x29\x6a\x95\x2c\x29\x67\xff\x30\x2a\xc4\x80\x37\x56\xea\x8a\xcd\xfe\xb7\xf5\xc4\x8d\xcf\x31\x9b\x23\xf7\xf7\x4b\xfd\x78\x01\xc5\xe2\x3f\x2c\x07\xeb\x98\x77\xb0\x75\xcf\x6b\x58\xf3\x37\x99\xea\x46\xa2\x18\x96\x11\xc3\xd8\x79\x4b\xab\x9c\x8e\x02\xf0\x4f\xf2\xe5\xab\xd1\x91\x68\x97\x73\x9d\x31\x07\x63\xeb\x6a\x7f\x58\x9c\xf3\xe8\xe9\xc0\xe7\xb6\xe5\x8f\x6f\x15\x83\x29\x1f\xd1\xdf\x00\x00\x00\xff\xff\x1b\x4d\xb6\x09\x5c\x03\x00\x00")

func templatesLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoginHtml,
		"templates/login.html",
	)
}

func templatesLoginHtml() (*asset, error) {
	bytes, err := templatesLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/login.html", size: 860, mode: os.FileMode(420), modTime: time.Unix(1455052737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRegisterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xcb\x72\xeb\x36\x0c\xdd\xf7\x2b\x30\x5a\x57\x71\xd3\xb5\xed\xe9\xb4\x93\x2e\x5b\x4f\x73\x9b\x3d\x25\x42\x16\x6b\x8a\xe4\x90\x90\x1f\xc9\xe4\xdf\x0b\x52\x0f\x3f\x93\x38\xad\x73\x37\x1a\x91\x3c\x04\x81\x03\x1c\x12\x2f\x2f\x20\xb1\x52\x06\x21\x2b\xad\x21\x34\x94\xc1\xeb\xeb\x0f\x00\x53\xa9\xd6\x50\x6a\x11\xc2\x2c\xf3\x76\x93\xcd\x79\xee\x78\xb6\xb4\x3a\xdf\x86\xfc\xfe\xe7\x7e\x8d\x57\xdd\xb0\xa6\x51\x48\x20\xdc\x52\x5e\xb2\x49\xf4\xdd\x7f\xd3\x12\xca\x6c\xfe\xf8\xf7\xef\x7f\xc1\x23\x52\xeb\xa6\x13\x77\xbe\x57\x68\xf4\x04\xe9\x9b\x2b\x53\x59\x88\xc6\xb2\xf9\xb7\x5a\x05\xd0\xd6\xae\xf8\xab\x56\x08\x02\x0c\x6e\x40\x99\x40\xc2\x94\x08\xb6\x82\x68\xf7\x0e\x16\x0c\x0f\x08\x1e\x97\x2a\xc4\x93\x77\xb6\xf5\x20\x64\xa3\x0c\xb4\x81\xc7\xc2\x48\xe0\x50\x2b\xb5\x6c\x3d\x02\xd5\x6c\xc9\x39\xad\x4a\x41\xca\x1a\x28\x50\xdb\xcd\xdd\xa1\x5f\x95\xf5\xcd\xe0\x5a\xfc\xcf\x6b\xeb\xd5\x33\x73\x25\x74\x06\xa2\x8c\xbb\x66\x19\xd3\xe8\x71\x8d\x3e\x74\x3c\xb2\xf1\x48\x63\x06\x0d\x52\x6d\xe5\x2c\x5b\xfc\xf9\xf8\x6d\xa4\x29\x1a\x55\xa8\x65\x40\xda\x4f\x1d\x73\x9b\x0e\x5a\x7a\xdb\xba\xec\x10\xc2\x20\x2d\xd8\x45\xe0\xf5\x59\x86\x8d\x50\xec\xc3\x69\x3a\x20\xfe\x35\x32\x8f\x3f\x86\x3c\x0f\xd2\x9e\x6c\xfe\x10\xf1\xd3\x49\x1a\x9d\x58\xbd\x94\xd6\xc1\xce\xfd\x4f\x27\x3e\x30\x5e\x19\xd7\xd2\x91\xb3\xfd\x59\x19\x28\x39\x7a\x46\x3b\x87\xe3\xc0\x88\x66\x3f\x70\x5a\x94\x58\x5b\x2d\x91\xe3\x58\xed\x34\xfe\x82\x5b\xd1\x38\x8d\x77\xa5\x6d\x98\xd6\x96\x6c\x29\x9c\x62\x8e\xd5\x33\xef\x32\xd6\xe0\x29\x11\x13\xf6\xf9\x88\xbe\xb3\x89\xcf\xf2\xe9\x18\xba\xb1\x5e\x7e\x82\xd2\x45\xbf\xe5\x96\xac\x46\x02\xcf\x5c\x39\xe6\xb8\x23\x76\x0f\xea\xb8\x1d\xc7\x1f\x30\xc5\x53\xc1\x09\x93\x0e\xaa\x51\xbb\x5f\xb5\x2d\x57\x6f\x07\x6d\xab\x8a\x2b\x95\x63\x8f\xd8\xbc\x48\xe0\xf9\x1f\x16\x02\x0b\x58\x25\x2d\x05\xf2\x42\x19\x0a\x3f\xc2\x3f\x6d\xa0\x28\x33\x56\xe7\xd2\x5a\x09\x21\xaa\x3f\xca\x93\x55\x08\x25\x9f\xe9\xb1\xc1\xa6\x40\xcf\x12\x8b\x3e\xdc\x2c\x81\x57\x67\xec\x49\x05\x55\x28\xad\x68\x77\x9b\x9c\x1d\x5e\x93\x42\x2a\x7b\x86\x18\x5c\x3c\x9f\x3f\xca\xf8\x7a\xf4\x2b\x77\x6d\xc1\xf7\xd1\x90\xe5\xce\x6a\x9f\xe2\x3d\x2a\x83\xb5\xd0\x6d\xcc\x7a\x8f\x2e\x6b\x2c\x57\x28\x2f\x1d\xb3\x48\x90\x73\xbf\x2e\x11\x70\xb1\x5e\xbe\x28\x4e\xaf\xd6\x82\xf0\xea\x40\x7b\xf8\xc5\x08\xbb\xb5\xff\x17\xe2\x3b\xa2\x38\x2c\xfd\x07\x23\x0a\x8d\xd0\xbb\x33\xbe\x40\x01\x54\x95\xca\x7c\x23\x0c\x01\x59\xa8\x95\x44\x88\x8f\xc2\x8e\x6a\x65\x96\x50\x79\xdb\xa4\xf7\xa6\xcb\xd8\x05\x05\xdc\xfa\x56\xbb\x5a\x14\xbf\x75\x4f\x3f\x3c\xb0\x34\xa5\x64\x67\xaf\xd6\xc6\xfd\x95\xda\x48\xd5\x59\xd8\xed\x7f\x2d\x9b\x78\x69\x48\x57\x5b\xb2\x61\xa8\x97\xd1\xe4\xf8\xb4\xec\x21\x97\xac\xa5\xe0\x60\x91\x00\x37\xd3\xc2\x4d\xe2\x5a\x73\xa5\x7c\x10\x57\x0f\x79\x3b\xae\xa7\x04\xf8\x3e\x02\x18\xaa\x04\xfa\x96\x11\x36\x4a\x6b\xee\xd8\xb8\x75\x02\xa7\x4a\xe2\xc6\x2a\xa4\x3e\xab\xf3\x3a\x8a\xa1\x40\x48\x92\xd6\x51\x30\x5d\x4f\x96\xda\xc0\x0a\x51\x7e\xa9\x12\xde\xbb\xcf\x87\x97\xed\xbc\x72\x8b\x96\x88\xbb\xc1\x2e\x21\xa1\x2d\x1a\x45\x23\x15\x05\x71\x9b\x48\x26\xe7\xbe\x59\xb4\x9a\x92\x7a\xba\x6e\x72\x3a\xe9\xf6\x7d\x2e\x92\xe9\xe4\xb4\x1b\xe4\x19\x8e\xa7\xef\xb8\x07\x70\xff\xc3\x9d\x26\x32\xb3\xdc\xa3\xff\x1b\x00\x00\xff\xff\xc1\x79\xcc\x3e\xbb\x0b\x00\x00")

func templatesRegisterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesRegisterHtml,
		"templates/register.html",
	)
}

func templatesRegisterHtml() (*asset, error) {
	bytes, err := templatesRegisterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/register.html", size: 3003, mode: os.FileMode(420), modTime: time.Unix(1455052725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSettingsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x41\x6f\xdb\x3a\x0c\xbe\xf7\x57\x10\xc2\xbb\xba\x79\x7d\xc7\x87\x24\x87\x0d\x1d\xb0\xd3\x8a\x65\xeb\x5d\xb6\xe9\x5a\xa8\x2c\x79\x32\xed\x34\x0b\xf2\xdf\x47\xc9\x96\x63\xa7\x2d\x9a\xa2\x2d\x76\x08\x62\x91\x9f\xc9\x8f\x9f\x48\xc9\xfb\x3d\xe4\x58\x28\x83\x20\x32\x6b\x08\x0d\x09\x38\x1c\x2e\xd8\xfc\x4f\x83\x44\xca\xdc\x35\xf0\xff\x0a\x2e\x37\x71\xc1\xce\x65\xae\x3a\xc8\xb4\x6c\x9a\x95\x70\x76\x2b\xd6\x17\x00\x53\x5b\x66\x75\xf2\xd0\x24\x57\xff\x05\x0f\xfb\x0a\xeb\xaa\xe8\xf4\xcf\x49\x69\x9d\xfa\xcd\xe9\xa4\x16\x20\x33\x52\xd6\xac\x04\xa7\x74\xd8\xa1\x6b\x98\x4a\x4c\xed\xb9\x08\xa8\x90\x4a\x9b\xaf\xc4\xcd\xb7\xcd\x8f\x21\xe4\x3c\x61\x88\x79\xe7\x6c\x5b\x8f\x6e\x06\x68\x99\xa2\x7e\xc4\x09\xfc\x53\x95\x27\xfe\xc1\x90\xe3\x45\xc0\x89\xf5\xad\x6a\x54\xaa\xb4\xa2\xdd\x72\x11\x4c\x93\x50\x4f\x15\x17\x03\x5d\xfd\x3b\x49\x3a\xc7\x3a\x99\x2b\x3b\xf3\x46\x5a\x73\x1b\x5b\x95\xa9\x5b\x02\xc5\x55\x76\x23\x8f\xa4\x6e\x53\xad\x32\x01\xb4\xab\x31\x46\x03\x23\x2b\x9c\xa2\x04\x74\x52\xb7\x6c\x8a\x68\x16\x52\x15\x80\xbf\x8e\x3b\x78\x79\xac\x0d\x46\xd8\xe1\x90\x95\x98\xdd\x63\xbe\xdf\xa3\xc9\x0f\x87\x35\x9c\x70\xba\x09\xc0\x39\xf9\x53\x65\xbc\x89\x0b\xfe\x30\x01\x9c\xea\x24\xe1\xd9\x0a\x44\xf8\x4b\x12\x44\xdc\x23\x0d\x4e\x25\xe8\x81\xaf\xd7\xa0\xa9\xa5\x09\xc5\x94\xa8\xeb\x4f\xda\x66\xf7\x22\x6a\xe2\x2d\x49\x1a\x4c\xeb\x6b\x23\x53\x8d\x30\xf0\x01\x65\x1a\x92\x26\xc3\xc6\xb3\xdf\xd9\x16\xb6\xd2\x10\x90\x85\x52\xe5\x08\x7e\x38\x76\x54\x72\x35\x50\x38\x5b\x01\x95\xfc\x66\xd8\xa3\xcb\xe5\xc2\x27\x9c\x34\xec\x94\xd0\x7c\xf1\xde\x63\xf3\xb9\x3f\x35\xe0\xba\x4a\x31\xcf\x99\xdc\x59\xd3\x73\x75\xc6\xf4\x84\xad\x49\xed\xc3\x6b\xfb\x07\x3d\x93\xba\xb4\x64\x9b\xd8\x38\x63\xa8\xa1\x77\x66\x90\xbe\x59\x8e\x9d\x12\x2a\xb9\x09\xce\x17\x1b\x24\x60\xa1\x07\xbf\x69\x52\xde\x54\x6c\xc7\xed\xf1\x42\xb1\x11\xf2\x64\xb1\xb7\xc1\x79\x66\xb1\x3d\xf8\xe3\x46\x22\xf6\x11\x0c\xf7\x11\x6c\x95\xd6\x20\xb5\xb6\x5b\xa8\x55\x46\xad\xe3\xf9\x90\x26\x87\xbe\x24\x3f\x1e\x29\x42\x38\x0d\xb4\x1f\x21\x3f\x38\x0e\x36\x3f\xbf\x7c\x87\x02\x31\xff\x9b\xb3\xf1\xb5\xaa\xad\xa3\xb7\x0d\x44\x3d\x63\x14\x13\xf0\x39\x41\x7c\x88\x9f\x34\x8b\x84\xd2\x61\x71\x72\x95\x96\x8a\xd2\x96\x77\x95\x12\x15\xe8\x84\x3b\x75\xa0\xd6\x1f\x24\x9b\x11\xb2\x5c\xc8\xf9\x26\xd6\xef\xa3\xdb\xb3\xf7\x67\x53\x4d\xf4\xb3\x45\xc1\x7d\x99\xf4\x6b\x7d\x37\xae\xe7\x82\xa4\x2d\x91\x35\x43\xaf\x37\x6d\x5a\x29\x1a\x1b\x29\x25\x03\xfc\x4b\xf8\x93\x46\xb6\x9a\xc4\x7a\x23\x3b\x5c\x2e\xfa\x57\xd6\xac\xcf\x11\x27\x9e\xd0\xaa\x75\x3a\x51\x26\xc7\x87\x5e\xa3\xcc\x9f\xc5\x7a\xa6\xc9\x73\x22\x2c\x17\xbe\xf0\xf0\x21\xd4\x1b\x87\x3f\x8e\xce\xa3\xe4\x3f\x9a\xfe\x04\x00\x00\xff\xff\x29\xe6\x20\x78\x69\x09\x00\x00")

func templatesSettingsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSettingsHtml,
		"templates/settings.html",
	)
}

func templatesSettingsHtml() (*asset, error) {
	bytes, err := templatesSettingsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/settings.html", size: 2409, mode: os.FileMode(420), modTime: time.Unix(1455071338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesShitbucketImportHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x92\xc1\x6e\x1b\x21\x10\x86\xef\x79\x8a\x11\x97\x9e\x36\xa8\x3d\x56\xde\x3d\x54\xbd\x54\xaa\xd4\xaa\x69\x1f\x80\x85\x49\x16\x85\x65\x10\x0c\xa9\xd3\xc8\xef\xde\x01\x6f\xd6\xf6\xc1\xb2\x99\xdf\x7c\xff\xfc\xc3\xbc\xbd\x81\xc3\x47\x1f\x11\x94\xa5\xc8\x18\x59\xc1\xe9\x74\x77\x70\xfe\x05\x6c\x30\xa5\x8c\x2a\xd3\x5f\x35\xdd\x01\x5c\xd7\x2c\x85\xe1\x58\x86\x8f\x9f\xba\x22\xda\x23\xe5\x15\x8c\x65\x4f\x71\x54\x02\xcd\xf8\x82\xb9\x08\xb5\x2c\x9e\xe7\x6a\x9f\x91\x07\xbf\x26\xca\x9d\xaf\x60\x45\x5e\xc8\x8d\xea\xe7\x8f\x87\xdf\x1b\xe3\xd6\xa1\x01\x87\xa7\x4c\x35\xed\xb2\xfc\x21\x98\x19\x03\x88\x36\xaa\x9a\x83\xba\xb4\x13\x39\x4b\x4b\x5d\x56\xd3\xc3\xee\x09\x7f\x7e\x7d\x3f\xe8\x5e\xbe\xa2\xf8\x98\x2a\xdf\x18\x6d\x00\x05\xde\x75\xf2\x50\xea\xbc\x7a\xe9\x95\x5f\x13\x8e\x8a\xf1\x28\xbf\xa3\x59\x71\xf3\x4d\xc1\x58\x5c\x28\x38\x94\x4e\x16\xe6\x54\x3e\x6b\x7d\x89\x7a\x8f\x47\xb3\xa6\x80\xf7\x96\x56\x6d\x92\xd7\x72\xa9\x28\x30\x95\xc9\xca\x91\x4d\xf0\xff\x04\x15\x29\xe2\x75\xba\x92\x4c\xec\x1d\x2c\x18\xd2\x97\x40\xf6\x79\x4f\xd8\x2a\xc3\xdc\x4b\xd3\x57\x8a\x1f\xb8\x0d\xe1\x49\x02\x32\x81\x71\x0e\x4c\x7c\x85\xd9\x14\x6f\x9b\xc9\x02\x36\xa3\x2b\x4d\xe3\x05\xcf\x33\x68\xec\x7d\xce\x5a\x06\xbd\x1f\xe6\xca\x4c\x71\x4b\xfa\x9e\x7b\xb3\x9d\x39\x82\x7c\x06\xd9\x11\x53\x03\xab\xe9\x5b\x7f\xc3\x83\x3e\x5f\xda\x1e\x5f\xb7\x19\xf6\x15\x39\x83\xb7\x2f\x59\x03\x8c\xae\xad\xd3\xff\x00\x00\x00\xff\xff\x61\x87\x0f\x00\x66\x02\x00\x00")

func templatesShitbucketImportHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesShitbucketImportHtml,
		"templates/shitbucket-import.html",
	)
}

func templatesShitbucketImportHtml() (*asset, error) {
	bytes, err := templatesShitbucketImportHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/shitbucket-import.html", size: 614, mode: os.FileMode(420), modTime: time.Unix(1455071795, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTagIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8f\x3d\x4b\xc6\x30\x10\xc7\xf7\x7e\x8a\xe3\x70\xd0\xa1\x7d\xd0\x51\xd2\x2e\xba\x08\xf2\x0c\xa2\x1f\x20\x36\xf7\xa4\x81\x78\x81\x24\xb6\x43\xc8\x77\xf7\x1a\x5a\x70\x0a\x77\xbf\xdc\xff\xa5\x14\x30\x74\x73\x4c\x80\x73\xe0\x4c\x9c\x11\x6a\xed\x94\x71\x2b\xcc\x5e\xa7\x34\x62\x0c\x1b\x4e\x1d\xc0\xff\xdd\x1c\x7c\xef\x6d\xff\xf8\xd4\x08\x40\x29\x51\xb3\x25\xb8\xcb\xda\xc2\xf3\x08\xc3\xa7\xb6\x49\x74\x76\xa6\xf4\x79\xf5\x9d\x19\x61\x89\x74\x1b\x51\x7c\x23\xad\x14\x93\x18\xcb\x4d\xbf\x3a\xda\x10\xd0\x19\x6c\x1a\xc3\xdb\xab\xc4\xc0\x49\xbe\xb5\xf1\xaa\x7f\x48\x16\x70\x5f\x4a\x9b\xbf\x3e\xde\x5f\xc2\x2f\xe7\x5a\x1f\xd4\x45\x9f\x19\xc8\x27\x3a\x4c\xaf\x21\x2f\x8e\xed\x70\x12\x36\x0d\xa8\x8b\x94\x98\xba\xe3\x11\x75\x01\x7b\xdf\xbf\x00\x00\x00\xff\xff\x61\xf7\x9e\x87\x07\x01\x00\x00")

func templatesTagIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTagIndexHtml,
		"templates/tag-index.html",
	)
}

func templatesTagIndexHtml() (*asset, error) {
	bytes, err := templatesTagIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tag-index.html", size: 263, mode: os.FileMode(420), modTime: time.Unix(1454988699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUrlEditHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\xc1\x6e\xdb\x30\x0c\xbd\xf7\x2b\x08\x61\x57\x37\xe8\x8e\x83\xed\xc3\xd0\x6d\x18\x30\x60\xc3\xda\x7d\x00\x2d\xd3\xb5\x30\x59\x32\x24\x2a\x4b\x5a\xf4\xdf\x47\x29\x9e\xe1\x36\x1d\x8a\x61\x87\x20\x12\xf9\xc2\xf7\xf8\x44\xe6\xe1\x01\x7a\x1a\x8c\x23\x50\xda\x3b\x26\xc7\x0a\x1e\x1f\x2f\x24\xfc\x26\x05\x0b\xef\x1a\xb8\xfc\xf1\xfd\x4b\x0e\xd5\xbd\xd9\x83\xb6\x18\x63\xa3\x82\xff\xa5\xda\x0b\x80\x6d\x4c\x7b\x5b\x1d\x62\x75\xf5\xb6\x64\x24\x37\xf8\x30\xfd\x49\xe6\x73\x35\xfa\x60\xee\x85\x04\xad\x02\xd4\x6c\xbc\x6b\x94\x10\x05\xda\x53\x88\x22\x40\x08\xab\x88\x7b\x52\xa0\x4c\xaf\x8a\x80\xcb\xcf\xd7\xc2\xad\x60\x22\x1e\x7d\xdf\xa8\x6f\x5f\x6f\x6e\x97\xfa\x4f\xd9\x0b\xc1\x5d\xf0\x69\x5e\xd3\x02\xb0\xd8\x91\x05\xc9\x35\x8a\x0d\x5b\xa9\xfc\x4c\x2c\xe4\xa6\x83\x5c\x0a\x52\xb5\xb7\x19\x55\xef\xca\x6d\x53\xe7\x85\x36\xaf\x36\x3c\x82\x30\x6e\x4e\x0c\xa6\x7f\x4e\x54\x74\x2d\x24\x0a\xf8\x38\x93\x20\xe8\x20\x2e\x3b\x9c\x68\x45\xef\xd1\x26\xca\x6e\x94\xa6\x8b\x8a\xdc\xf6\x6c\x51\xd3\xe8\x6d\x4f\xd2\xc1\x87\x03\x4e\xb3\x25\xc8\xef\x51\x10\xdb\x4e\x77\x22\x71\xf5\xe5\xc9\xe5\x9f\x4c\xc2\xbb\xf8\xba\x47\x02\xfa\x4f\x8b\xb6\x34\xaf\x3a\x54\xc0\xab\x41\xa7\xb1\xf8\x44\x9c\x65\x7c\xf4\xe1\xda\x44\x71\xe9\x08\x67\x76\x69\x3f\x09\x1f\x85\x2a\x6a\x43\x4e\x13\x58\x41\x42\x8e\x1a\x2b\xf3\x26\x23\x98\xd8\x6b\x9c\x8d\xcc\xa3\xb9\x97\xda\xce\xbb\xbf\x5a\x2a\xd7\x38\xa3\x2b\xea\x47\xb2\xf3\x7b\xeb\xf5\xcf\x33\xa7\xb2\x55\xe5\xe4\x87\x21\x12\x8b\x75\x19\x5b\x75\x05\x5c\x7c\x83\x29\x45\x86\x8e\x20\xd2\x8c\x01\x99\x7a\xe8\x8e\x80\x20\xc5\xb5\xcc\x5d\xe6\x78\xf9\x15\xbb\xc4\xec\xdd\x62\x4f\x4c\xdd\x64\x78\xa5\xef\xd8\x81\x7c\x2a\x59\x64\x4c\x96\x55\x7b\x23\x4b\x54\xef\x4e\x3f\x69\x6b\xdc\xe0\x14\x8c\x81\x86\xf3\xb5\x33\xae\xa7\x43\xde\x7c\xd5\x6a\x14\xb3\x6c\xbd\xc3\x65\x8d\x77\xf9\x81\xca\xb2\x9f\x04\x2d\x5f\x52\x81\x5c\x9f\xff\x18\x7e\x07\x00\x00\xff\xff\x9a\x0d\xa3\x53\x43\x04\x00\x00")

func templatesUrlEditHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUrlEditHtml,
		"templates/url-edit.html",
	)
}

func templatesUrlEditHtml() (*asset, error) {
	bytes, err := templatesUrlEditHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/url-edit.html", size: 1091, mode: os.FileMode(420), modTime: time.Unix(1455002156, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUrlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x51\xbd\x6e\xb3\x40\x10\xec\xfd\x14\xa3\x93\xf5\x75\x60\x7d\x29\x13\x4c\x13\x29\x55\xaa\xfc\x14\x29\x2f\xb0\x98\x93\x8e\x3b\x74\xb7\xd8\x96\x10\xef\x9e\x35\x18\x4c\xac\x54\x30\x3b\xbb\xb3\x33\x7b\x7d\x8f\x92\x2a\xe3\x08\xaa\xf0\x8e\xc9\xb1\xc2\x30\x6c\xb2\xd2\x1c\x51\x58\x1d\xe3\x5e\x05\x7f\x52\xf9\x06\x58\xd7\x0a\x6f\x93\x73\x4c\xfe\x3f\x8c\x0c\xd0\xf7\xa6\x42\xfa\xec\x3b\xc7\x32\x3d\x55\xb0\x8d\xc4\x6c\xdc\x21\xe2\x71\x8f\xf4\x7d\x06\x4b\x43\xd0\xee\x40\xd8\x76\xc1\x8e\x0d\x9f\x6f\xaf\x0b\x39\xce\x33\x35\xad\xd5\x2c\xd6\xa4\x25\x69\x75\x60\xa3\xad\x82\xa3\xd3\x68\xf5\xcc\x50\x32\xa3\x26\x05\x35\xeb\xab\xd5\xde\x9b\x17\x72\xe5\x8c\xfe\xca\x76\x5f\xbf\xcf\x37\xf2\xed\xcc\x5e\x76\x27\x4d\xc7\x54\xaa\xfc\x45\x32\x97\x97\x0d\x53\x7a\x59\xf2\xaf\x26\x6b\x4d\xfb\x94\xed\xda\x45\x7a\x27\xda\x13\x58\xfd\xf6\x3d\xd9\x48\xb3\xab\xdf\xea\x85\xbc\x04\x05\x95\x7f\xd4\x14\x08\x26\xc2\x79\xae\x25\x13\x46\xfc\xdd\x31\xa2\xb1\xe4\x0a\x4a\xf1\xe5\x3b\x14\xda\xc1\x34\xad\x0f\x8c\x52\xb3\x46\x15\x7c\x03\x99\xa0\x80\x48\xe1\x68\x0a\x8a\x30\x0e\x52\x40\xa6\x51\x07\xaa\xf6\x4a\x3c\x07\x3a\x52\x88\x72\xe0\xb8\x1c\x6f\x18\x54\x3e\xa3\x6c\xa7\xf3\x74\x89\xb1\xbe\xe2\x35\xc5\xf5\x73\x63\x7e\x02\x00\x00\xff\xff\x1c\x1d\x93\x0f\x4f\x02\x00\x00")

func templatesUrlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUrlIndexHtml,
		"templates/url-index.html",
	)
}

func templatesUrlIndexHtml() (*asset, error) {
	bytes, err := templatesUrlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/url-index.html", size: 591, mode: os.FileMode(420), modTime: time.Unix(1455160616, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUrlNewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x4d\x6f\xd4\x30\x10\xbd\xf7\x57\x8c\x7c\xe1\x14\xa2\xf6\x88\x92\x3d\x70\x46\x02\x41\x39\x70\x74\x9c\xc9\xc6\xc2\x5f\xb2\xc7\x65\xdb\xaa\xff\x9d\xb1\x37\xbb\x24\x6c\x25\xb4\xa8\x87\x28\x1e\xcf\xf8\xbd\x37\xcf\x1f\xcf\xcf\x30\xe2\xa4\x1d\x82\x50\xde\x11\x3a\x12\xf0\xf2\x72\xd3\x8d\xfa\x01\x94\x91\x29\xf5\x22\xfa\x5f\x62\x77\x03\xb0\x9e\x53\xde\x34\x87\xd4\xdc\xde\xd5\x0c\xe7\x26\x1f\xed\x29\x59\xc6\xcd\xec\xa3\x7e\x62\x44\x69\x04\x48\x45\xda\xbb\x5e\x30\x59\xc4\x07\x8c\x89\xd9\x72\x34\x4d\xca\x83\xd5\x95\x50\x80\x45\x9a\xfd\xd8\x8b\x2f\x9f\xbf\xdd\x2f\xa0\x5b\xca\x8a\xba\x8f\x3e\x87\x73\x9a\x0b\x8c\x1c\xd0\x00\xe7\xfa\x82\x28\xd6\xfa\xec\xd8\xdc\xc2\x49\x68\x19\x39\x8a\x1c\xd5\x15\x62\xf7\xfd\xeb\xa7\xae\xad\xe3\x15\xda\x5f\x1d\x16\x84\x3f\x10\x77\x2b\x5e\xae\xd5\x2e\x64\xda\x88\x5b\x18\x04\xe8\xb1\xdf\xf4\x47\x8f\x01\x7b\x41\x78\xe0\xb1\x93\x16\x17\xad\xc1\x48\x85\xb3\x37\x23\xb2\xfa\x99\x28\xa4\x0f\x6d\x8b\x07\x69\x83\xc1\xf7\xca\x5b\x36\x2e\x93\x57\x32\x68\x76\x51\x3f\xf1\x32\xe7\x1d\xae\xbb\x6f\x59\xf0\xd9\xab\x4d\x70\x8d\x71\x24\xf7\xe9\x0a\xe7\xee\xb9\xfc\x2d\xac\x2b\x2e\x6d\xa8\xb7\x26\x5e\x9a\x76\x2c\xde\xb8\xc6\x2e\x31\x14\xc6\x26\x29\x8d\x4e\x21\x18\x9d\x02\x94\x59\x6d\xf8\x9c\x5d\xe7\x20\x87\x29\x48\x57\x85\xcd\x68\xc2\x47\xe3\xd5\x4f\x71\x71\xe4\x61\xe9\xcf\x4f\x53\x42\x62\xa7\x4a\x6d\x33\xd4\xe2\x6a\x0e\xd8\x9c\x08\x06\x84\x84\x41\x46\x49\x38\xc2\xf0\x08\x12\x18\x5c\x61\xd7\x16\x8e\xff\xdc\xb4\xd7\x6e\x60\x95\x93\xec\x6b\xc2\x4a\x6c\xf6\xe7\x78\xbb\x09\x43\x26\xf2\x6e\xb1\xf9\x74\x52\x17\xf0\x81\x1c\xf0\xd7\xf0\xd3\x20\xb3\x21\xb1\xfb\xe1\xf3\xbb\xc8\x0d\xcd\x9a\x48\xbb\x3d\xdf\xd6\xae\x3d\x02\xec\x3a\xb9\x5a\x25\x60\x8e\x38\x5d\xde\x74\xed\x46\x3c\xd4\x8b\xbe\x53\x92\xf7\xc9\x74\xad\xfc\xf7\x39\xee\xda\x62\x43\x7d\x7b\x8e\x93\xcb\x8f\xd1\xd1\x8d\xe5\x9d\xfa\x1d\x00\x00\xff\xff\xd0\x26\x4f\x40\xbf\x04\x00\x00")

func templatesUrlNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUrlNewHtml,
		"templates/url-new.html",
	)
}

func templatesUrlNewHtml() (*asset, error) {
	bytes, err := templatesUrlNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/url-new.html", size: 1215, mode: os.FileMode(420), modTime: time.Unix(1455001798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUrlPartialHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\xcd\x6e\xb3\x30\x10\xbc\xe7\x29\x56\x56\xae\x04\x7d\x5f\x6f\x15\x20\x55\xfd\x51\x2f\xbd\xa5\xe7\x6a\x83\x17\x62\xd5\x31\xc8\x6c\xda\x4a\x11\xef\xde\x35\xb1\x03\x89\x7a\xc2\xeb\x99\xdd\x19\xef\x70\x3a\x81\xa6\xc6\x38\x02\x75\xf4\x36\xeb\xd1\xb3\x41\xab\x60\x1c\x57\x02\xad\xe5\x0e\xee\x4b\xd8\x84\xba\xd0\xe6\x0b\x6a\x8b\xc3\x50\x2a\xdf\x7d\xab\x6a\x05\xb0\xbc\xab\x3b\x9b\xd9\x36\xfb\xf7\x7f\x42\xae\xb1\x30\xbb\xee\x1c\xa3\x28\x79\xc1\x27\x82\x50\xf6\x77\x55\x3c\x4a\x81\xb0\xf7\xd4\x94\x2a\x0a\x6f\xde\x45\x7c\x1c\x15\x30\xfa\x96\xb8\x54\x1f\x3b\x8b\xee\x53\x55\x0b\x7c\x6b\xd8\x92\x90\x8a\x1c\xd3\xa0\x22\x0f\x43\x53\xd1\x27\x07\x4c\x3f\x9c\x1d\x8e\x4c\x5a\x55\xc5\x70\x40\x6b\xab\x3f\x04\x4d\x10\xbc\x08\xbc\x74\xfe\x80\x2c\x2d\x8f\x9e\x50\x3e\x0f\x1c\xa5\x20\x83\x6b\x93\x45\x1e\x47\xe6\xfd\x45\x5b\x18\xa6\x39\x93\x5e\x71\xd8\x62\x3b\x84\x2d\x46\x5f\x26\xf9\x6a\x10\x1a\xcc\x18\x5b\xb1\x95\x9b\x2a\x74\x79\x74\x2d\xc1\x5a\xee\xc2\xee\xa7\x01\xb1\xfb\xe2\x38\x17\x30\x0f\x16\x02\x29\x59\x3e\x9f\x27\x7f\x52\x92\xd3\xb3\xde\x5c\x27\x03\x37\xe1\x60\xcd\xa6\x73\x83\x5a\xc4\x31\xf4\xe8\x12\x65\x6f\xb4\x26\xb7\x40\xa7\xb8\x22\xb8\x63\xa7\x6e\x36\xf9\x86\x0e\x5b\x0a\xae\xd3\x4e\x9f\xb5\xe1\xc9\xda\x55\x1f\x4c\xb1\xe8\xf0\x60\x7f\x3b\xe3\x89\x2c\x31\xa5\xfe\x73\xb5\xc8\x39\x24\x1d\x2c\xce\xb9\xcb\x93\xe2\x9f\x97\x8e\xf1\x10\x3f\xf3\x12\x7e\x03\x00\x00\xff\xff\x94\xed\xdc\x0e\xf6\x02\x00\x00")

func templatesUrlPartialHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUrlPartialHtml,
		"templates/url-partial.html",
	)
}

func templatesUrlPartialHtml() (*asset, error) {
	bytes, err := templatesUrlPartialHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/url-partial.html", size: 758, mode: os.FileMode(420), modTime: time.Unix(1454376085, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUrlViewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x4c\xcb\x09\x80\x30\x0c\xbd\x3b\x45\xc8\x5d\x27\xf1\xa4\x38\x40\xb1\x51\x0a\x35\x96\xfa\x44\xa1\x74\x77\x83\xe2\xe5\xfd\x79\xa5\x90\x97\x25\xa8\x10\xcf\xbb\x42\x14\x4c\xb5\x36\x16\x43\xb6\x14\x1d\xac\x38\x73\x6c\x93\xcb\x08\x2e\x32\xa9\x5c\xef\xf0\x06\xf1\x34\xf4\x4c\x9d\x21\xf1\x28\x40\xd0\xf5\x30\xff\xcb\xef\x47\xd4\x1b\x3f\x01\x00\x00\xff\xff\x66\x62\x1c\x66\x67\x00\x00\x00")

func templatesUrlViewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUrlViewHtml,
		"templates/url-view.html",
	)
}

func templatesUrlViewHtml() (*asset, error) {
	bytes, err := templatesUrlViewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/url-view.html", size: 103, mode: os.FileMode(420), modTime: time.Unix(1455157149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/base.html": templatesBaseHtml,
	"templates/config-base.html": templatesConfigBaseHtml,
	"templates/login.html": templatesLoginHtml,
	"templates/register.html": templatesRegisterHtml,
	"templates/settings.html": templatesSettingsHtml,
	"templates/shitbucket-import.html": templatesShitbucketImportHtml,
	"templates/tag-index.html": templatesTagIndexHtml,
	"templates/url-edit.html": templatesUrlEditHtml,
	"templates/url-index.html": templatesUrlIndexHtml,
	"templates/url-new.html": templatesUrlNewHtml,
	"templates/url-partial.html": templatesUrlPartialHtml,
	"templates/url-view.html": templatesUrlViewHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"base.html": &bintree{templatesBaseHtml, map[string]*bintree{}},
		"config-base.html": &bintree{templatesConfigBaseHtml, map[string]*bintree{}},
		"login.html": &bintree{templatesLoginHtml, map[string]*bintree{}},
		"register.html": &bintree{templatesRegisterHtml, map[string]*bintree{}},
		"settings.html": &bintree{templatesSettingsHtml, map[string]*bintree{}},
		"shitbucket-import.html": &bintree{templatesShitbucketImportHtml, map[string]*bintree{}},
		"tag-index.html": &bintree{templatesTagIndexHtml, map[string]*bintree{}},
		"url-edit.html": &bintree{templatesUrlEditHtml, map[string]*bintree{}},
		"url-index.html": &bintree{templatesUrlIndexHtml, map[string]*bintree{}},
		"url-new.html": &bintree{templatesUrlNewHtml, map[string]*bintree{}},
		"url-partial.html": &bintree{templatesUrlPartialHtml, map[string]*bintree{}},
		"url-view.html": &bintree{templatesUrlViewHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

